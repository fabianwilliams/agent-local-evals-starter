using System;
using System.IO;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using Microsoft.SemanticKernel;
using Microsoft.SemanticKernel.ChatCompletion;
using Microsoft.SemanticKernel.Connectors.Ollama;
using DocumentFormat.OpenXml.Packaging;
using DocumentFormat.OpenXml.Wordprocessing;

internal class SimpleProgram
{
    private static IConfiguration? _configuration;
    private static ILogger<SimpleProgram>? _logger;
    
    private static async Task Main(string[] args)
    {
        // Initialize configuration and logging
        var configurationBuilder = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);
        _configuration = configurationBuilder.Build();

        var loggerFactory = LoggerFactory.Create(builder =>
        {
            builder.AddConsole();
        });
        _logger = loggerFactory.CreateLogger<SimpleProgram>();

        Console.WriteLine("üöÄ Starting FABS - Simple Single-Agent Mode");
        Console.WriteLine(new string('=', 70));

        try
        {
            await RunSimpleBlogGenerationAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Fatal error: {ex.Message}");
            Environment.Exit(1);
        }
    }

    private static async Task RunSimpleBlogGenerationAsync()
    {
        // Initialize kernel with simple chat completion
        var kernel = CreateKernel();
        var chatService = kernel.GetRequiredService<IChatCompletionService>();

        // Load paths and template
        var draftsFolder = _configuration?["Paths:DraftsFolder"] ?? "";
        var templateFolder = _configuration?["Paths:TemplateFolder"] ?? "";
        var finalDraftFolder = _configuration?["Paths:FinalDraftFolder"] ?? "";

        if (!Directory.Exists(draftsFolder))
        {
            Console.WriteLine($"‚ùå Drafts folder not found: {draftsFolder}");
            return;
        }

        // Load template
        var template = await LoadTemplateAsync(templateFolder);
        
        // Process Word documents
        var docxFiles = Directory.GetFiles(draftsFolder, "*.docx")
            .Where(f => !Path.GetFileName(f).StartsWith("~$"))
            .ToArray();

        if (docxFiles.Length == 0)
        {
            Console.WriteLine("üìù No Word documents found in drafts folder.");
            return;
        }

        Directory.CreateDirectory(finalDraftFolder);

        foreach (var docxFile in docxFiles)
        {
            Console.WriteLine($"\nüéØ Processing: {Path.GetFileName(docxFile)}");
            await ProcessSingleDocumentAsync(chatService, docxFile, template, finalDraftFolder);
        }
    }

    private static Kernel CreateKernel()
    {
        var builder = Kernel.CreateBuilder();
        
        var baseUrl = _configuration?["Ollama:BaseUrl"] ?? "http://localhost:11434";
        var modelId = _configuration?["Ollama:ModelId"] ?? "llama3.3:70b";
        
        Console.WriteLine($"üîó Connecting to {baseUrl} with model {modelId}");
        
        builder.AddOllamaChatCompletion(modelId: modelId, endpoint: new Uri(baseUrl));
        
        return builder.Build();
    }

    private static async Task<string> LoadTemplateAsync(string templateFolder)
    {
        try
        {
            if (!Directory.Exists(templateFolder))
            {
                return "Use Hugo blog format with emoji headers and frontmatter.";
            }

            var templateFiles = Directory.GetFiles(templateFolder, "*.md");
            if (templateFiles.Length == 0)
            {
                return "Use Hugo blog format with emoji headers and frontmatter.";
            }

            var template = await File.ReadAllTextAsync(templateFiles.First());
            Console.WriteLine($"üìã Loaded template: {Path.GetFileName(templateFiles.First())}");
            return template;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ö†Ô∏è Template load failed: {ex.Message}");
            return "Use Hugo blog format with emoji headers and frontmatter.";
        }
    }

    private static async Task ProcessSingleDocumentAsync(IChatCompletionService chatService, string docxPath, string template, string outputFolder)
    {
        try
        {
            // Extract Word document content
            var content = ExtractWordContent(docxPath);
            Console.WriteLine($"üìñ Extracted {content.Length} characters");

            // Create a focused, single prompt for blog generation
            var prompt = CreateBlogGenerationPrompt(content, template);
            
            Console.WriteLine("ü§ñ Generating blog post...");
            
            // Single call to generate the entire blog post
            var response = await chatService.GetChatMessageContentAsync(prompt);
            
            if (response?.Content == null)
            {
                Console.WriteLine("‚ùå No response from model");
                return;
            }

            // Save the generated blog post
            var fileName = $"BLOG_{DateTime.Now:yyyyMMdd_HHmmss}_{Path.GetFileNameWithoutExtension(docxPath)}.md";
            var outputPath = Path.Combine(outputFolder, fileName);
            
            await File.WriteAllTextAsync(outputPath, response.Content);
            
            Console.WriteLine($"‚úÖ Blog post generated: {fileName}");
            Console.WriteLine($"üìÅ Saved to: {outputPath}");

            // Archive the original
            var archivePath = Path.ChangeExtension(docxPath, ".processed.docx");
            File.Move(docxPath, archivePath);
            Console.WriteLine($"üì¶ Original archived: {Path.GetFileName(archivePath)}");
            
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå Error processing {Path.GetFileName(docxPath)}: {ex.Message}");
        }
    }

    private static string CreateBlogGenerationPrompt(string content, string template)
    {
        var today = DateTime.Now.ToString("yyyy-MM-dd");
        
        return $"""
            Convert this to a blog post using the template style:

            STYLE: {template.Substring(0, Math.Min(800, template.Length))}...

            CONTENT: {content.Substring(0, Math.Min(1500, content.Length))}...

            OUTPUT:
            - Hugo frontmatter (+++), author "Fabian Williams", date "{today}"
            - Emoji headers (üöÄ üõ†Ô∏è üß† üìã)
            - Technical but conversational tone
            - Complete markdown blog post
            """;
    }

    private static string ExtractWordContent(string docxPath)
    {
        try
        {
            using var doc = WordprocessingDocument.Open(docxPath, false);
            var body = doc.MainDocumentPart?.Document?.Body;
            
            if (body == null) return "Could not extract content.";

            var content = new StringBuilder();
            
            foreach (var element in body.Elements())
            {
                if (element is Paragraph paragraph)
                {
                    var text = GetParagraphText(paragraph);
                    if (!string.IsNullOrWhiteSpace(text))
                    {
                        content.AppendLine(text);
                        content.AppendLine();
                    }
                }
                else if (element is Table table)
                {
                    content.AppendLine("[TABLE CONTENT]");
                    foreach (var row in table.Elements<TableRow>())
                    {
                        var cells = row.Elements<TableCell>()
                            .Select(cell => string.Join(" ", cell.Elements<Paragraph>()
                                .Select(p => GetParagraphText(p))
                                .Where(t => !string.IsNullOrWhiteSpace(t))))
                            .Where(t => !string.IsNullOrWhiteSpace(t));
                        
                        if (cells.Any())
                        {
                            content.AppendLine("| " + string.Join(" | ", cells) + " |");
                        }
                    }
                    content.AppendLine("[/TABLE]");
                    content.AppendLine();
                }
            }

            return content.ToString();
        }
        catch (Exception ex)
        {
            return $"Error extracting Word content: {ex.Message}";
        }
    }

    private static string GetParagraphText(Paragraph paragraph)
    {
        var text = new StringBuilder();
        foreach (var run in paragraph.Elements<Run>())
        {
            foreach (var textElement in run.Elements<Text>())
            {
                text.Append(textElement.Text);
            }
        }
        return text.ToString().Trim();
    }
}